@page "/DocumentGen"
@using DocumentFormat.OpenXml.Packaging
@using DocumentFormat.OpenXml.Wordprocessing
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions
@using TemplateDocumentGenerator.Data
@using TemplateDocumentGenerator.Models
@using TemplateDocumentGenerator.Services
@using DocumentFormat.OpenXml;
@inject ApplicationDbContext dbContext
@inject AIService aiService

<h3>Create Document</h3>

<div class="row">
    <div class="col-md-6" style="max-width:400px"
        <label>Select the template</label>
        <InputSelect @bind-Value="templateId" class="form-select">
            <option value="@Guid.Empty">-- Select a template --</option>
            @foreach (var template in templates)
            {
                <option value="@template.Id">@template.Name</option>
            }
        </InputSelect>
        <br/>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <button disabled="@isBusy" @onclick="()=>generateDocx()" class="btn btn-primary">Generate Document</button>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <br/>
        <br/>
        <h4>Generated Documents</h4>
        <ul>
            @foreach (var doc in generatedDocs)
            {
                <li style="padding-bottom:3px;"><a href="@doc">@doc</a> <button class="btn btn-danger" @onclick="()=>deleteGeneratedDocument(doc)" >Delete</button>  </li>
            }
        </ul>
    </div>
</div>

@if (isBusy)
{
    <style>
        body {
            cursor: wait;
        }
    </style>
}
else
{
    <style>
        body {
            cursor: default;
        }
    </style>
}

@code {

    private Guid templateId = Guid.Empty;
    private List<DocxTemplate> templates = new List<DocxTemplate>();
    private List<string> generatedDocs = new List<string>();
    private bool isBusy = false;

    protected override async Task OnInitializedAsync()
    {
        loadGeneratedDocs();
        await loadTemplates();
    }

    private async Task loadTemplates()
    {
        var results = await dbContext.DocxTemplates.ToListAsync();
        if (results!=null)
        {
            templates = results;
        }
        else
        {
            templates = new List<DocxTemplate>();
        }
        StateHasChanged();
    }

    private void loadGeneratedDocs()
    {
        //Get all of the files in the GeneratedDocx folder and add them to the list
        generatedDocs = Directory.GetFiles("GeneratedDocx").ToList();
        StateHasChanged();       
    }

    private async void generateDocx()
    {
        isBusy = true;
        StateHasChanged();

        //Load template from Id
        var template = await dbContext.DocxTemplates.FirstOrDefaultAsync(x => x.Id == templateId);
        if (template != null)
        {
            //Get fields for the template
            Dictionary<string,string> fieldContent = new Dictionary<string, string>();
            var fields = await dbContext.TemplateFields.Where(x => x.TemplateId == template.Id).ToListAsync();
            if (fields!=null)
            {

                //Generate content
                foreach (var f in fields)
                {
                    string content = await aiService.GenerateTextUsingMemoriesAsync(f.Prompt);
                    fieldContent.Add(f.Placeholder, content);
                }

                string newFile = Path.Combine("GeneratedDocx", $"{template.Name}-{DateTime.Now.ToString("MMddyyyy-HHmmss")}.docx");

                //Copy the template to the new file
                File.Copy(template.Path, newFile, true);

                //Generate document by opening the template docx file using OpenXML
                using (WordprocessingDocument wordDoc = WordprocessingDocument.Open(newFile, true))
                {
                    string docText = null;
                    using (StreamReader sr = new StreamReader(wordDoc.MainDocumentPart.GetStream()))
                    {
                        docText = sr.ReadToEnd();
                    }

                    foreach (var item in fieldContent)
                    {
                        Regex regexText = new Regex(item.Key);
                        docText = regexText.Replace(docText, item.Value);
                    }

                    using (StreamWriter sw = new StreamWriter(wordDoc.MainDocumentPart.GetStream(FileMode.Create)))
                    {
                        sw.Write(docText);
                    }
                }
            }
        }
        isBusy = false;
        loadGeneratedDocs();
        StateHasChanged();
    }

    private void deleteGeneratedDocument(string path)
    {
        //ensure that the folder is /GeneratedDocx only
        if (path.StartsWith(@"GeneratedDocx\"))
        {
            if (File.Exists(path))
                File.Delete(path);
            loadGeneratedDocs();
            StateHasChanged();
        }
    }
}
